package com.wuk.fastorm.sql;

import com.wuk.fastorm.sql.impl.SimpleGeneratedKey;

import javax.sql.rowset.CachedRowSet;
import javax.sql.rowset.RowSetFactory;
import javax.sql.rowset.RowSetProvider;
import java.math.BigDecimal;
import java.sql.*;
import java.util.Date;

/**
 * sql语句执行器
 */
public class Executor {

    protected Connection connection;
    private Sql sql;

    public Executor(Connection connection, Sql sql) {
        this.connection = connection;
        this.sql = sql;
    }

    /**
     * 执行语句，返回受影响的行数
     * @return
     * @throws SQLException
     */
    public int doUpdate() throws SQLException {
        PreparedStatement statement = getStatement(Statement.NO_GENERATED_KEYS);
        int result = statement.executeUpdate();

        statement.close();

        return result;
    }

    /**
     * 执行，填充自增长主键
     * @param generatedKey
     * @return
     * @throws SQLException
     */
    public int doUpdate(SimpleGeneratedKey generatedKey) throws SQLException {
        PreparedStatement statement = getStatement(Statement.RETURN_GENERATED_KEYS);
        int result = statement.executeUpdate();

        ResultSet resultSet = statement.getGeneratedKeys();
        if (resultSet.next()) {
            generatedKey.setObj(resultSet.getObject(1));
        }

        resultSet.close();
        statement.close();

        return result;
    }

    /**
     * 执行语句，返回查询结果
     * @return
     * @throws SQLException
     */
    public ResultSet doQuery() throws SQLException {
        PreparedStatement statement = getStatement(Statement.NO_GENERATED_KEYS);
        ResultSet resultSet = statement.executeQuery();

        RowSetFactory rowSetFactory = RowSetProvider.newFactory();
        CachedRowSet rowSet = rowSetFactory.createCachedRowSet();
        rowSet.populate(resultSet);

        resultSet.close();
        statement.close();

        return rowSet;
    }

    private PreparedStatement getStatement(int autoGeneratedKeys) throws SQLException {
        PreparedStatement statement = connection.prepareStatement(sql.getSql(), autoGeneratedKeys);
        for (int i = 0; i < sql.getParams().size(); i++) {
            setParam(statement, i + 1, sql.getParams().get(i));
        }
        return statement;
    }

    private void setParam(PreparedStatement statement, int index, SqlParam param) throws SQLException {
        if (param.getClazz().equals(int.class) || param.getClazz().equals(Integer.class)) {
            setInt(statement, index, param.getObj());
        } else if (param.getClazz().equals(long.class) || param.getClazz().equals(Long.class)) {
            setLong(statement, index, param.getObj());
        } else if (param.getClazz().equals(float.class) || param.getClazz().equals(Float.class)) {
            setFloat(statement, index, param.getObj());
        } else if (param.getClazz().equals(double.class) || param.getClazz().equals(Double.class)) {
            setDouble(statement, index, param.getObj());
        } else if (param.getClazz().equals(boolean.class) || param.getClazz().equals(Boolean.class)) {
            setBoolean(statement, index, param.getObj());
        } else if (param.getClazz().equals(String.class)) {
            setString(statement, index, param.getObj());
        } else if (param.getClazz().equals(BigDecimal.class)) {
            setBigDecimal(statement, index, param.getObj());
        } else if (param.getClazz().equals(Date.class)) {
            setDate(statement, index, param.getObj());
        }
    }

    private void setInt(PreparedStatement statement, int index, Object obj) throws SQLException {
        if (obj != null) {
            if (!(obj instanceof Integer)) {
                throw new SQLException(String.format("参数类型不匹配，参数应该是%s类型，实际类型是%s", Integer.class.getName(), obj.getClass().getName()));
            }
            statement.setInt(index, (Integer) obj);
        } else {
            statement.setNull(index, Types.INTEGER);
        }
    }

    private void setLong(PreparedStatement statement, int index, Object obj) throws SQLException {
        if (obj != null) {
            if (!(obj instanceof Long)) {
                throw new SQLException(String.format("参数类型不匹配，参数应该是%s类型，实际类型是%s", Long.class.getName(), obj.getClass().getName()));
            }
            statement.setLong(index, (Long) obj);
        } else {
            statement.setNull(index, Types.BIGINT);
        }
    }

    private void setFloat(PreparedStatement statement, int index, Object obj) throws SQLException {
        if (obj != null) {
            if (!(obj instanceof Float)) {
                throw new SQLException(String.format("参数类型不匹配，参数应该是%s类型，实际类型是%s", Float.class.getName(), obj.getClass().getName()));
            }
            statement.setFloat(index, (Float) obj);
        } else {
            statement.setNull(index, Types.FLOAT);
        }
    }

    private void setDouble(PreparedStatement statement, int index, Object obj) throws SQLException {
        if (obj != null) {
            if (!(obj instanceof Double)) {
                throw new SQLException(String.format("参数类型不匹配，参数应该是%s类型，实际类型是%s", Double.class.getName(), obj.getClass().getName()));
            }
            statement.setDouble(index, (Double) obj);
        } else {
            statement.setNull(index, Types.DOUBLE);
        }
    }

    private void setBoolean(PreparedStatement statement, int index, Object obj) throws SQLException {
        if (obj != null) {
            if (!(obj instanceof Boolean)) {
                throw new SQLException(String.format("参数类型不匹配，参数应该是%s类型，实际类型是%s", Boolean.class.getName(), obj.getClass().getName()));
            }
            statement.setBoolean(index, (Boolean) obj);
        } else {
            statement.setNull(index, Types.BOOLEAN);
        }
    }

    private void setString(PreparedStatement statement, int index, Object obj) throws SQLException {
        if (obj != null) {
            if (!(obj instanceof String)) {
                throw new SQLException(String.format("参数类型不匹配，参数应该是%s类型，实际类型是%s", String.class.getName(), obj.getClass().getName()));
            }
            statement.setString(index, (String) obj);
        } else {
            statement.setNull(index, Types.VARCHAR);
        }
    }

    private void setBigDecimal(PreparedStatement statement, int index, Object obj) throws SQLException {
        if (obj != null) {
            if (!(obj instanceof BigDecimal)) {
                throw new SQLException(String.format("参数类型不匹配，参数应该是%s类型，实际类型是%s", BigDecimal.class.getName(), obj.getClass().getName()));
            }
            statement.setBigDecimal(index, (BigDecimal) obj);
        } else {
            statement.setNull(index, Types.DECIMAL);
        }
    }

    private void setDate(PreparedStatement statement, int index, Object obj) throws SQLException {
        if (obj != null) {
            if (!(obj instanceof Date)) {
                throw new SQLException(String.format("参数类型不匹配，参数应该是%s类型，实际类型是%s", Date.class.getName(), obj.getClass().getName()));
            }
            statement.setTimestamp(index, new Timestamp(((Date) obj).getTime()));
        } else {
            statement.setNull(index, Types.TIMESTAMP);
        }
    }
}
